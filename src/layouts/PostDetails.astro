---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";
import { getCollection } from "astro:content";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
  series,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const postUrl = new URL(Astro.url.pathname, Astro.url.origin).href;

const allPosts = await getCollection("blog", ({ data }) => !data.draft);

const getPostsBySeriesName = (
  allPosts: CollectionEntry<"blog">[],
  seriesName: string
) => allPosts.filter(post => post.data.series?.name === seriesName);

let seriesPosts: CollectionEntry<"blog">[] = [];
if (series) {
  seriesPosts = getPostsBySeriesName(allPosts, series.name).sort(
    (a, b) => a.data.series!.order - b.data.series!.order
  );
}

const currentPostIndex = seriesPosts.findIndex(p => p.slug === post.slug);
const prevPost =
  currentPostIndex > 0 ? seriesPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex < seriesPosts.length - 1
    ? seriesPosts[currentPostIndex + 1]
    : null;
---

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
>
  <Header />
  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="history.back()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Go back</span>
    </button>
  </div>
  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    <Datetime
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      size="lg"
      className="my-2"
    />
    {
      series && seriesPosts.length > 1 && (
        <nav class="series-nav">
          <h2 class="series-title">{series.name} Series</h2>
          <ul class="series-posts">
            {seriesPosts.map(seriesPost => (
              <li class={seriesPost.slug === post.slug ? "current-post" : ""}>
                {seriesPost.slug === post.slug ? (
                  <span>{seriesPost.data.title}</span>
                ) : (
                  <a href={`/posts/${seriesPost.slug}/`}>
                    {seriesPost.data.title}
                  </a>
                )}
              </li>
            ))}
          </ul>
        </nav>
      )
    }
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>

    {
      series && seriesPosts.length > 1 && (
        <nav class="mt-8 flex justify-between">
          {prevPost && (
            <a
              href={`/posts/${prevPost.slug}/`}
              class="text-skin-accent hover:underline"
            >
              ← {prevPost.data.title}
            </a>
          )}
          {nextPost && (
            <a
              href={`/posts/${nextPost.slug}/`}
              class="ml-auto text-skin-accent hover:underline"
            >
              {nextPost.data.title} →
            </a>
          )}
        </nav>
      )
    }

    <ShareLinks url={postUrl} text={title} />

    {
      tags && tags.length > 0 && (
        <ul class="tags-container">
          {tags.map(tag => (
            <Tag name={tag} />
          ))}
        </ul>
      )
    }
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
  .tags-container {
    @apply my-8;
  }
  .series-nav {
    @apply my-8 border-l-4 border-skin-accent pl-4;
  }
  .series-title {
    @apply mb-2 text-lg font-medium text-skin-base;
  }
  .series-posts {
    @apply list-none space-y-1;
  }
  .series-posts a {
    @apply text-skin-base hover:text-skin-accent;
  }
  .series-posts .current-post {
    @apply font-medium text-skin-accent;
  }
</style>

<!-- Your inline scripts here -->
<script is:inline>
  /** Create a progress indicator at the top */
  function createProgressBar() {
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    progressContainer.appendChild(progressBar);
    document.body.appendChild(progressContainer);
  }

  /** Update the progress bar when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    const myBar = document.getElementById("myBar");
    if (myBar) {
      myBar.style.width = scrolled + "%";
    }
  }

  /** Attaches links to headings in the document */
  function addHeadingLinks() {
    const headings = document.querySelectorAll("h2, h3, h4, h5, h6");
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;
      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }

  /** Attaches copy buttons to code blocks */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = document.querySelectorAll("pre");

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.textContent = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        const code = codeBlock.querySelector("code");
        const text = code?.textContent || "";
        await navigator.clipboard.writeText(text);
        copyButton.textContent = "Copied";
        setTimeout(() => {
          copyButton.textContent = copyButtonLabel;
        }, 700);
      });
    }
  }

  /** Scrolls the document to the top */
  function backToTop() {
    const backToTopButton = document.querySelector("#back-to-top");
    if (backToTopButton) {
      backToTopButton.addEventListener("click", () => {
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
      });
    }
  }

  // Execute all functions
  createProgressBar();
  document.addEventListener("scroll", updateScrollProgress);
  addHeadingLinks();
  attachCopyButtons();
  backToTop();
</script>
